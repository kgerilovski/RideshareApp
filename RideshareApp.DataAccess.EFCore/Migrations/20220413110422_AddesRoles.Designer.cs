// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RideshareApp.DataAccess.EFCore;

#nullable disable

namespace RideshareApp.DataAccess.EFCore.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220413110422_AddesRoles")]
    partial class AddesRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("Id - идентификатор");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Електронна поща");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Име");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasComment("Изтрит ли е записът");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Фамилия");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Потребителско име");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Парола");

                    b.Property<DateTime?>("SysInsDate")
                        .HasColumnType("TEXT")
                        .HasComment("Дата на insert на записа");

                    b.Property<DateTime?>("SysUpdDate")
                        .HasColumnType("TEXT")
                        .HasComment("Дата на update на записа");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RideshareApp.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("Id - идентификатор");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Наименование на роля");

                    b.Property<DateTime?>("SysInsDate")
                        .HasColumnType("TEXT")
                        .HasComment("Дата на insert на записа");

                    b.Property<DateTime?>("SysUpdDate")
                        .HasColumnType("TEXT")
                        .HasComment("Дата на update на записа");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasComment("Роли");
                });

            modelBuilder.Entity("RideshareApp.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasComment("Id - идентификатор");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasComment("Роля");

                    b.Property<DateTime?>("SysInsDate")
                        .HasColumnType("TEXT")
                        .HasComment("Дата на insert на записа");

                    b.Property<DateTime?>("SysUpdDate")
                        .HasColumnType("TEXT")
                        .HasComment("Дата на update на записа");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasComment("Потребител");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasComment("Роли на потребители");
                });

            modelBuilder.Entity("RideshareApp.Entities.UserRole", b =>
                {
                    b.HasOne("RideshareApp.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
